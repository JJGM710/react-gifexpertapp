{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GiftExpertApp.js","index.js"],"names":["AddCategory","setCategories","categories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","test","find","ctg","toLowerCase","trim","length","undefined","console","log","placeholder","className","type","value","onChange","target","GifGridItem","id","title","url","src","alt","defaultProps","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","key","GiftExpertApp","defaulCategories","ReactDOM","render","document","getElementById"],"mappings":"6MA+CeA,EA5CK,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,WAAgB,EAEfC,mBAAS,IAFM,mBAE1CC,EAF0C,KAE/BC,EAF+B,KAyBjD,OACI,0BAAMC,SAdW,SAACC,GAClBA,EAAEC,iBAEF,IAAIC,EAAOP,EAAWQ,MAAK,SAACC,GAAD,OAASA,EAAIC,gBAAkBR,EAAWS,OAAOD,iBACxER,EAAWS,OAAOC,OAAS,QAAcC,IAATN,IAEhCR,GAAc,SAAAU,GAAG,OAAKP,GAAL,mBAAoBO,OACrCK,QAAQC,IAAI,qBACZZ,EAAc,OAOd,+BAAKD,EAAL,KACA,2BACIc,YAAY,WACZC,UAAU,MACVC,KAAO,OACPC,MAASjB,EACTkB,SA7Bc,SAACf,GAEvBF,EAAcE,EAAEgB,OAAOF,OAGvBL,QAAQC,IAAI,kCCTPO,EAAc,SAAC,GAAoB,EAAnBC,GAAoB,IAAhBC,EAAe,EAAfA,MAAMC,EAAS,EAATA,IAEnC,OACI,yBAAKR,UAAU,4DACX,yBAAKS,IAAKD,EAAKE,IAAKH,IACpB,+BAAKA,EAAMA,EAAMd,cAAc,qBAA/B,OAgBZY,EAAYM,aAAe,G,2BCxBdC,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbN,EADa,iDACmCO,UAAWF,GAD9C,8DAEAG,MAAMR,GAFN,cAEbS,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAAG,YACpB,CACGhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QARvB,kBAYZY,GAZY,4CAAH,sDCMPK,EAAU,SAAC,GAAgB,IAAfZ,EAAc,EAAdA,SAAc,ECHX,SAACA,GAAc,IAAD,EACZ7B,mBAAS,CAC/BmC,KAAK,GACLO,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAsBtC,OAfAC,qBAAU,WAEFjB,EAAQC,GACPiB,MAAK,SAAAC,GAEFH,EAAS,CACLT,KAAMY,EACNL,SAAQ,SAMtB,CAACb,IAEIc,EDT0BK,CAAanB,GAAhCU,EAVqB,EAU5BJ,KAAeO,EAVa,EAUbA,QAItB,OACI,oCACA,wBAAI1B,UAAU,kDAAkDa,GAE/Da,GAAW,wBAAI1B,UAAU,oDAAd,cAEZ,yBAAKA,UAAW,aAEXuB,EAAOF,KAAI,SAACC,GAAD,OACP,kBAAC,EAAD,eACGW,IAAOX,EAAIhB,IACPgB,UEUTY,EArCO,SAAC,GAA6B,IAAD,IAA3BC,wBAA2B,MAAR,GAAQ,IAGXnD,mBAASmD,GAHE,mBAGxCpD,EAHwC,KAG5BD,EAH4B,KAW/C,OACI,oCACA,4BAAK,IAAL,mBAA0B,KAE1B,kBAAC,EAAD,CAAaA,cAAeA,EAAeC,WAAYA,IACvD,6BACA,4BAKKA,EAAWsC,KAAI,SAAAR,GAAQ,OACpB,kBAAC,EAAD,CACIA,SAAWA,EACXoB,IAAOpB,UCtB3BuB,IAASC,OAAQ,kBAAC,EAAD,MAAmBC,SAASC,eAAe,U","file":"static/js/main.8acf4781.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({setCategories, categories}) => {\r\n\r\n    const [inputValue,setInputValue]= useState('')\r\n\r\n    const handleInputChange = (e) => {\r\n        //console.log(e.target.value);\r\n        setInputValue(e.target.value)\r\n\r\n\r\n        console.log('llamdo de evento onchange')\r\n    }\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        //console.log('handleSubmit', inputValue)\r\n        let test = categories.find((ctg) => ctg.toLowerCase() === inputValue.trim().toLowerCase());\r\n        if (inputValue.trim().length > 2 && test === undefined)\r\n        {\r\n            setCategories(ctg => [inputValue, ...ctg]);\r\n            console.log('se hizo el cambio')\r\n            setInputValue('');\r\n        }\r\n       // console.log(categories);\r\n        \r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <p> {inputValue} </p>\r\n            <input \r\n                placeholder=\"Search..\"\r\n                className='box'\r\n                type = \"text\" \r\n                value = {inputValue}\r\n                onChange = {handleInputChange}\r\n            ></input>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories : PropTypes.func.isRequired,\r\n    categories: PropTypes.array.isRequired\r\n};\r\n\r\nexport default AddCategory;\r\n","import React from 'react'\r\nimport { PropTypes } from 'prop-types';\r\n\r\nexport const GifGridItem = ({id, title,url}) => {\r\n   // console.log(id, title, url);\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn animate__delay-1s\">\r\n            <img src={url} alt={title} />\r\n            <p> {title?title.toLowerCase():'titulo no definido'} </p>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n//definicon de default props y de isrequired\r\n\r\n\r\n//validacion de propiedades\r\nGifGridItem.propTypes = {\r\n    title : PropTypes.string.isRequired,\r\n    url : PropTypes.string.isRequired\r\n};\r\n\r\n//definir propiedades por defect\r\nGifGridItem.defaultProps = {\r\n};\r\n\r\n\r\n// 1.enzyme\r\n// 2.enzyme to jSON\r\n// 3. debe mostar el comp correctamente\r\n    \r\n// shallow\r\n// wrapper \r\n// expect wrapper toMatchSnapshot \r\n","export const getGifs = async(category) =>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI( category ) }&limit=5&api_key=YZbBl8tS3nUlB6hKDE2zRv4fUWZADs8q`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n    const gifs = data.map(img => \r\n        ({\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        })\r\n    )\r\n   // console.log(gifs);\r\n    return gifs;\r\n}","import React from 'react'\r\nimport { GifGridItem } from './GifGridItem';\r\n//import { getGifs } from './../helpers/getGifs';\r\nimport { useFetchGifs } from './../hooks/useFetchGifs';\r\nimport { PropTypes } from 'prop-types';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    // const [images, setimages] = useState([]);\r\n\r\n    // // genera una dependecia con category, es decir, que cada vez que el valor de esa propiedad cambie va a renderizar ese component\r\n    // useEffect(() => {\r\n    //     getGifs(category)\r\n    //         .then(imgs => setimages(imgs));\r\n    // }, [category])\r\n\r\n    const {data : images, loading} = useFetchGifs(category);\r\n\r\n\r\n    //getGifs();\r\n    return (\r\n        <>\r\n        <h3 className=\"animate__animated animate__flash animate__slow\">{category}</h3>\r\n\r\n        {loading && <h2 className=\"animate__animated animate__flash animate__slower\">Loading...</h2>}\r\n\r\n        <div className= 'card-grid'>\r\n            \r\n            {images.map((img) => (\r\n                 <GifGridItem \r\n                    key = {img.id}\r\n                    {...img} />\r\n            ))\r\n            }\r\n\r\n        </div>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nGifGrid.propTypes = {\r\n    category: PropTypes.string.isRequired\r\n}","import { useState, useEffect } from 'react';\r\nimport { getGifs } from './../helpers/getGifs';\r\n// recibe los datos de imgs, para guardarlos en data y tambien se indica cuando termina de cargar los archivos\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setstate] = useState({\r\n        data:[],\r\n        loading: true,\r\n    });\r\n\r\n    //obterner cuando la categoria cambia, use effect  no puede ser async\r\n    useEffect(() => {\r\n\r\n            getGifs(category)\r\n            .then(imgs =>{\r\n\r\n                setstate({\r\n                    data: imgs,\r\n                    loading:false\r\n                })\r\n            })\r\n\r\n\r\n\r\n    },[category])\r\n\r\n    return state; //retorna el usesate como estado inciial\r\n}","import React, { useState } from 'react'\r\nimport AddCategory from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GiftExpertApp = ({defaulCategories = []}) => {\r\n\r\n    //uso de useState para establecer categorias\r\n    const [categories, setCategories] = useState(defaulCategories);\r\n\r\n    // const handleAdd = () => {\r\n    //     setCategories( ctgs => [...ctgs,'Kimetsu no Yaiba']);\r\n\r\n    // }\r\n\r\n\r\n    return (\r\n        <>\r\n        <h1>{\"<\"}Buscador de GIFS{\">\"}</h1>\r\n        {/* conectar con el componente AddCategory  enviando dos propiedades para establecer mas catergorias */}\r\n        <AddCategory setCategories={setCategories} categories={categories}></AddCategory>\r\n        <br></br>\r\n        <ol>\r\n        {/* con el metodo map se la usa con el estado de categorias, la cual es un array\r\n        y renderiza varios Gifgrid como elementos dentro de categories exista.\r\n        Cuando se anaden nuevos, debido a como trabaja React solo se rederiza esa parte nueva del DOM\r\n        y se anade solamente el GifGrid con el elemento que fue anadido a categories */}\r\n            {categories.map(category => (\r\n                <GifGrid \r\n                    category= {category}\r\n                    key = {category} \r\n                />\r\n            ))\r\n            }\r\n        </ol>\r\n\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default GiftExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GiftExpertApp from './GiftExpertApp';\n\n\n\nReactDOM.render( <GiftExpertApp />, document.getElementById('root'));\n"],"sourceRoot":""}